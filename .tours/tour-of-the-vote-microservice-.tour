{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "4 - Tour of the Vote microservice ",
  "steps": [
    {
      "title": "Introduction",
      "description": "The Vote service is responsible for incrementing the couple (wilderId, skillId)."
    },
    {
      "file": "docker-compose.yml",
      "description": "The service runs on the 5002 port.\n\nIt depends on the nats streaming server and on a redis container.",
      "line": 35
    },
    {
      "file": "vote/src/routes/createVote.ts",
      "description": "The service vote is connected to the same nats streaming server as the other services.",
      "line": 9
    },
    {
      "file": "vote/src/routes/createVote.ts",
      "description": "The body of the POST request is the wilder id and the skill id.\n\nThat's represent who received the vote and for wich skill.",
      "line": 22
    },
    {
      "file": "vote/src/routes/createVote.ts",
      "description": "It increments by one in the redis database.",
      "line": 24
    },
    {
      "file": "vote/src/routes/createVote.ts",
      "description": "It pusblishes a `VOTE_CREATED` event with a JSON string containing wilderId, skillId and the count.",
      "line": 30
    },
    {
      "file": "query/src/index.ts",
      "description": "The query service is listening for the `VOTE_CREATED` event and will save it in the database.",
      "line": 63
    },
    {
      "file": "query/src/index.ts",
      "description": "This is for the `graphQL subscription` mechanism that will update the query on the client application with a websocket.\n\n**This is not related to the microservice architecture but it is another use of an event pattern**",
      "line": 67
    },
    {
      "file": "readme.md",
      "description": "These tours are over, now feel free to explore the repository and to add some features if you want to.",
      "line": 1
    }
  ]
}